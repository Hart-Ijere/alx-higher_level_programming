#!/usr/bin/python3
"""
This module contains the class definition of a State and an instance of Base
using SQLAlchemy's declarative_base.
"""

from sqlalchemy import Column, Integer, String, create_engine
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()


class State(Base):
    """
    State class that links to the MySQL table states.

    Attributes:
        id (int): Column of an auto-generated, unique integer, can't be null
                  and is a primary key.
        name (str): Column of a string with a maximum of 128 characters and
                    can't be null.
    """
    __tablename__ = 'states'

    id = Column(Integer, primary_key=True, autoincrement=True, nullable=False)
    name = Column(String(128), nullable=False)


if __name__ == '__main__':
    # Replace <mysql_username>, <mysql_password>, and <database_name> with actual values
    engine = create_engine(
        'mysql+mysqldb://<mysql_username>:<mysql_password>@localhost:3306/<database_name>'
    )

    # Create all tables in the engine. This is equivalent to "Create Table" statements in raw SQL.
    Base.metadata.create_all(engine)
